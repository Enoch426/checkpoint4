1) What are comments?

comments are lines that arne't read by the interpreters. 

2) Demonstrate at least 2 ways to create a comment. One should be for multiple lines.

you can make comments on the commit section of git. or you can make a comment on a file. 

3) If the name of a file is app.py what do we type in the command line to tell our computer to run it?

Type cd PythonPrograms and hit Enter.
Type dir and you should see the file Hello.py.

4) Demonstrate how I can tell a Python program to display something in the command line.

def say_hello_to_Enoch(): 
print("Hey, Enoch!")

say_hello_to_Enoch()

5) What can we use to save a value for later use in our code? Provide an example.

variables and constants

ex. name = ("Enoch", "kigwila")
    print(name[0])

turning variables into comments , thierby nulling them, is also another method to save values and variables for later  "#" 

6) What can I do to prevent certain files and directories from being tracked by git?

You can make Git ignore certain files and directories -- that is , exlude them from being 
tracked by git -- by creating one or more " .gitignore" files in your repository.

when a file or a directory is ignored it will not be:
tracked by Git 
Reported by commands such as git status or git diff
staged with commands suchs as git add -A

7) What can be used in order to repeat some block of code? Provide 2 examples.

a while loop and a for loop 

ex.
    name = input("what is your name?")
    endprogram == (quit)
    answer = ("wow cool name!!)
    answer2 = ("oh that alright I guess!")


while name == ("Enoch")
        print(answer)
        print(name)
    if name != ("enoch)
        print(answer2)
        print(endprogam)




8) When saving a value for later use what type of operator do we use?

a simple assingment opperator "="

9) What's the key difference between git revert and git reset?

git revert stores the reverted file incase they still want to use it again

git reset completely wipes out the file the previous file and will not be able to come back

10) What's the key difference between Python lists and tuples?

Lists and Tuples are type of containers in Data Structures 

ex. i = ("2", "3", "4", "five")

while the tuples are immutable objects the lists are mutable. 
This means tuples cannot be changed while the lists can be modified

11) What can I do to know where I am within my file system?

to see where you are in the file system, use pwd 
to see which branch your in on git, use git branch 
to see commmits you have done in git, but just a short snippet of the data, use git log --oneline

12) Describe the anatomy of a Python dictionary and create one below.

Dictionaries are python's way of making a data structure that is more generally known as an associative array
a dictionary is a collection of key-value pairs, each key-value pair bieng paired to its associated value. 
d = {
    <key>: <value>,
    <key>: <value>,
      .
      .
      .
    <key>: <value>
}

MLB_team = {
...     'Colorado' : 'Rockies',
...     'Boston'   : 'Red Sox',
...     'Minnesota': 'Twins',
...     'Milwaukee': 'Brewers',
...     'Seattle'  : 'Mariners'
... }


13) What type of values can be in a Python dictionary?

The values of a dictionary can be any type
The keys must be of an immutable data type howover 
Types such as strings and number are acceptable, even tuples. 

14) What type of values can be in a Python list?

Integers  1234
Floats    123.4
Lists     [1,2,3,"4"]
tuples    (1,2,3,"4")

15) What data type are True and False?

Boolean data type  

s = (1)
q = (quit)
while s != (false)
    print(s)
        s +1 
elif s == 6
    s == (false)
    print(q)

16) What language does your computer understand?

Machine language

Machine language gives instructions as 0's and 1's and is the only language that the computer understands.

17) What do we need in order for your computer to make use of programming languages?

to make a computer "understand" high level programming language, you need a complier or an interpreter. 
these are programs that translate a high-level programming languages into the language of low-level instructions. 

18) At what index is your instructor's name located in this list? ["Ron", "Troy", "Martha"]

its on index 1 
indexes start from 0 
Ron is on index 0 and Martha is index 2

19) What does frontend / client side mean?

Front-end web development, or client-side development, iis the practice of producing 
HTML, CSS, and JavaScript for a website or Web Application 
so that a user can see and intercat with them directly. 


20) What does backend / server side mean?

back end or server side is how the site works, updates and changes as far as database and servers. 

21) What are 3 way to create a Python string?


22) What are 2 types of number data types in Python? Provide an example.


23) Are we able to add two strings together? How?


24) What commands would you use to create the following file structure? (write every command line by line):
    
    Desktop
    -> projects
        -> instagram
            -> images
                -> profile_image.jpg
            -> app.py
        -> tiktok
            -> clips
            -> app.py


25) What is the path to profile_image.jpg?


26) What commands can I use to get from the clips directory to the images directory? (write every command line by line):


27) What method can I use to change this string from "troy" to "Troy"? 


28) What method can I use to change this string from "TROY" to "troy"?


29) How can I check to see if all of the characters in a string are numbers/digits?


30) How can I split a string into a list with each value in the list being a line of the string?


31) What are the Python comparison operators? List each and describe.


32) What are the Python logical operators? List each and describe.


33) How can we decide to run one piece of code versus another? Provide an example.


34) What can I do to work on my primary code, but not mess it up? Provide an example.


35) What do I do in order to make sure I have the latest code on my machine?


36) How can I accept user input into my Python code?


37) How can I see all of my git commits?


38) How can I add a value to a Python list?


39) How can I remove a value from a Python list?


40) How can I access a value in a Python dictionary?


41) How can I remove a value from a Python dictionary?


42) How can I change a value in a Python dictionary?


43) What is a pull request? Describe it in detail.


44) Why do we use services like Github?


45) How can I create a git branch?


46) How can I switch to another branch?


47) What happens if multiple engineers try to change the same area of a codebase from different points in time?


48) What are the 3 stages of of tracking our work with git?


49) What are the commands we'd use, in order, to move our changes through these stages?


50) Is spacing in my Python code important? Why?